int main (){   
    GPIO_InitTypeDef  GPIO_InitStructure;
  
    /* Enable the GPIO_LED Clock */
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOE, &GPIO_InitStructure);
  
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

    /* Configure the GPIO_LED pin */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
  
    SysTick_Config(SystemCoreClock/1000);
   
    res = f_mount(0, &filesystem);
    res = f_open(&file, "Fionnghuala8.wav", FA_OPEN_ALWAYS | FA_READ);   

    res = f_read(&file,wavBuf[readBufIdx], WAV_BUF_SIZE, &readBytes);
    for (uint16_t i = 0; i < (WAV_BUF_SIZE - 3); i++)
    {
        if ((wavBuf[0][i] == 'd') && (wavBuf[0][i + 1] == 'a') &&
            (wavBuf[0][i + 2] == 't') && (wavBuf[0][i + 3] == 'a'))
        {
            dataOffset = i + 8;
            break;
        }
    }
    res = f_lseek(&file, dataOffset);
    fullwavDataSize = f_size(&file) - dataOffset;
    wavDataSize=fullwavDataSize;
    
   
    res = f_read(&file, wavBuf3, WAV_BUF_SIZE*2, &readBytes);
    DMAPlayinit();
    
    while(1){
        
            
    }
}
	
void DMAPlayinit(){
    
  GPIO_InitTypeDef  GPIO_InitStructure;
  TIM_TimeBaseInitTypeDef    TIM_TimeBaseStructure;
  DAC_InitTypeDef  DAC_InitStructure;
  DMA_InitTypeDef DMA_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
  GPIO_Init(GPIOA, &GPIO_InitStructure);
  
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
  TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
  TIM_TimeBaseStructure.TIM_Period = 29-1;                                      
  TIM_TimeBaseStructure.TIM_Prescaler = 9-1;                                    
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM6, &TIM_TimeBaseStructure);
  TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);                         
  TIM_Cmd(TIM6, ENABLE);                                                        
  

  RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);

  DAC_InitStructure.DAC_Trigger = DAC_Trigger_T6_TRGO;
  DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
  DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Disable;
  DAC_Init(DAC_Channel_1, &DAC_InitStructure);
  DAC_Cmd(DAC_Channel_1, ENABLE);                                               
  
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE); 
  DMA_Cmd(DMA1_Stream5, DISABLE);
  DMA_DeInit(DMA1_Stream5);
  DMA_InitStructure.DMA_Channel = DMA_Channel_7;
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)DAC1_DHR_12L1_ADDRESS;
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) &wavBuf16;
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
  DMA_InitStructure.DMA_BufferSize = 8192;
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_MemoryDataSize = DMA_PeripheralDataSize_HalfWord;
  DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
  DMA_InitStructure.DMA_Priority = DMA_Priority_High;
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
  DMA_Init(DMA1_Stream5, &DMA_InitStructure);

  DMA_ITConfig(DMA1_Stream5,DMA_IT_TC | DMA_IT_HT,ENABLE);
    
  NVIC_InitStructure.NVIC_IRQChannel = DMA1_Stream5_IRQn;
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 5;
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure); 

  DMA_Cmd(DMA1_Stream5, ENABLE);
  DAC_DMACmd(DAC_Channel_1, ENABLE);
}


void DMA1_Stream5_IRQHandler(void)
{
  if (DMA_GetITStatus(DMA1_Stream5,DMA_IT_HTIF5)){
    DMA_ClearITPendingBit(DMA1_Stream5,DMA_IT_HTIF5);
    firstSide=1;
     res= f_read(&file,&wavBuf3[0], WAV_BUF_SIZE, &readBytes);
     for(int i=0;i<512;i++){
         for(int k=0;k<8;k++)
            wavBuf16[i*8+k] = (wavBuf3[i]*m_mod+255*(1-m_mod))*Wave8[k];
     }     
  }
    
  if (DMA_GetITStatus(DMA1_Stream5,DMA_IT_TCIF5)){
      DMA_ClearITPendingBit(DMA1_Stream5,DMA_IT_TCIF5);
      firstSide=0;
      res = f_read(&file,&wavBuf3[512], WAV_BUF_SIZE, &readBytes); 
      for(int i=512;i<1024;i++){
          for(int k=0;k<8;k++)
            wavBuf16[i*8+k] = (wavBuf3[i]*m_mod+255*(1-m_mod))*Wave8[k];
      }
  }
  
  wavDataSize -= readBytes;
  if(wavDataSize<15000){
      wavDataSize=fullwavDataSize;
      f_lseek(&file, 50);                                         
  }
  
}